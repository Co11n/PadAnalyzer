using Dia2Lib;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GenerateUserTypesFromPdb.UserTypes
{
    class GlobalsUserType : UserType
    {
        private IDiaSession session;

        public GlobalsUserType(IDiaSession session, string moduleName)
            : base(session.globalScope, new XmlType() { Name = "Globals" }, moduleName)
        {
            this.session = session;
        }

        public override string ClassName
        {
            get
            {
                return "ModuleGlobals";
            }
        }

        internal override IEnumerable<UserTypeField> ExtractFields(UserTypeFactory factory, UserTypeGenerationFlags options)
        {
            var fields = session.globalScope.GetChildren(SymTagEnum.SymTagData).OrderBy(s => s.name).ToArray();
            bool useThisClass = options.HasFlag(UserTypeGenerationFlags.UseClassFieldsFromDiaSymbolProvider);
            string previousName = "";

            foreach (var field in fields)
            {
                if (string.IsNullOrEmpty(field.type.name))
                {
                    continue;
                }

                if (field.type.name.Contains("CSbTimerEventCacheAccess"))
                {

                }


                if (IsFieldFiltered(field) || field.name == previousName)
                    continue;

                UserType userType;
                factory.TryGetUserType(field.type.name, out userType);

                if (userType == null)
                {
                    continue;
                }

                var userField = ExtractField(field, factory, options, forceIsStatic: true);

                userField.FieldName = userField.FieldName.Replace("?", "_").Replace("$", "_").Replace("@", "_").Replace(":", "_").Replace(" ", "_").Replace("<", "_").Replace(">", "_").Replace("*", "_").Replace(",", "_");
                userField.PropertyName = userField.PropertyName.Replace("?", "_").Replace("$", "_").Replace("@", "_").Replace(":", "_").Replace(" ", "_").Replace("<", "_").Replace(">", "_").Replace("*", "_").Replace(",", "_");

                yield return userField;
                previousName = field.name;
            }

            foreach (var field in GetAutoGeneratedFields(false, useThisClass))
                yield return field;
        }

        internal override bool Matches(IDiaSymbol type, UserTypeFactory factory)
        {
            return false;
        }

        internal override bool Matches(string typeString, UserTypeFactory factory)
        {
            return false;
        }

        protected override UserTypeTree GetBaseTypeString(TextWriter error, IDiaSymbol type, UserTypeFactory factory)
        {
            return new UserTypeStaticClass();
        }

        protected override IEnumerable<UserTypeConstructor> GenerateConstructors()
        {
            yield return new UserTypeConstructor()
            {
                ContainsFieldDefinitions = true,
                Static = true,
            };
        }
    }
}