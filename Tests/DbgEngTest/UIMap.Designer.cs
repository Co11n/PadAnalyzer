// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace DbgEngTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertInteractiveWindowReady - Use 'AssertInteractiveWindowReadyExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertInteractiveWindowReady()
        {
            #region Variable Declarations
            WpfText promptLabel = this.InteractiveWindow.InteractiveWindowContent.ResultContainer.PromptLabel;
            WpfPane uIItemPane = this.InteractiveWindow.UIItemPane;
            #endregion

            // Verify that the 'Name' property of 'C#>' label equals 'C#> '
            Assert.AreEqual(this.AssertInteractiveWindowReadyExpectedValues.PromptLabelName, promptLabel.Name, "Wrong prompt text");

            // Verify that the 'Enabled' property of pane equals 'True'
            Assert.AreEqual(this.AssertInteractiveWindowReadyExpectedValues.UIItemPaneEnabled, uIItemPane.Enabled, "Editor is not active");
        }
        
        #region Properties
        public virtual AssertInteractiveWindowReadyExpectedValues AssertInteractiveWindowReadyExpectedValues
        {
            get
            {
                if ((this.mAssertInteractiveWindowReadyExpectedValues == null))
                {
                    this.mAssertInteractiveWindowReadyExpectedValues = new AssertInteractiveWindowReadyExpectedValues();
                }
                return this.mAssertInteractiveWindowReadyExpectedValues;
            }
        }
        
        public InteractiveWindow InteractiveWindow
        {
            get
            {
                if ((this.mInteractiveWindow == null))
                {
                    this.mInteractiveWindow = new InteractiveWindow();
                }
                return this.mInteractiveWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertInteractiveWindowReadyExpectedValues mAssertInteractiveWindowReadyExpectedValues;
        
        private InteractiveWindow mInteractiveWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertInteractiveWindowReady'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertInteractiveWindowReadyExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'C#>' label equals 'C#> '
        /// </summary>
        public string PromptLabelName = "C#> ";
        
        /// <summary>
        /// Verify that the 'Enabled' property of pane equals 'True'
        /// </summary>
        public bool UIItemPaneEnabled = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InteractiveWindow : WpfWindow
    {
        
        public InteractiveWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "C# Interactive Window";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C# Interactive Window");
            #endregion
        }
        
        #region Properties
        public InteractiveWindowContent InteractiveWindowContent
        {
            get
            {
                if ((this.mInteractiveWindowContent == null))
                {
                    this.mInteractiveWindowContent = new InteractiveWindowContent(this);
                }
                return this.mInteractiveWindowContent;
            }
        }
        
        public WpfPane UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new WpfPane(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
                    this.mUIItemPane.WindowTitles.Add("C# Interactive Window");
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private InteractiveWindowContent mInteractiveWindowContent;
        
        private WpfPane mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class InteractiveWindowContent : WpfCustom
    {
        
        public InteractiveWindowContent(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.InteractiveWindowContent";
            this.WindowTitles.Add("C# Interactive Window");
            #endregion
        }
        
        #region Properties
        public ResultContainer ResultContainer
        {
            get
            {
                if ((this.mResultContainer == null))
                {
                    this.mResultContainer = new ResultContainer(this);
                }
                return this.mResultContainer;
            }
        }
        #endregion
        
        #region Fields
        private ResultContainer mResultContainer;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class ResultContainer : WpfPane
    {
        
        public ResultContainer(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.WindowTitles.Add("C# Interactive Window");
            #endregion
        }
        
        #region Properties
        public PromptLabel PromptLabel
        {
            get
            {
                if ((this.mPromptLabel == null))
                {
                    this.mPromptLabel = new PromptLabel(this);
                }
                return this.mPromptLabel;
            }
        }
        #endregion
        
        #region Fields
        private PromptLabel mPromptLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class PromptLabel : WpfText
    {
        
        public PromptLabel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "C#> ";
            this.WindowTitles.Add("C# Interactive Window");
            #endregion
        }
        
        #region Properties
        public WpfCustom CodeInput
        {
            get
            {
                if ((this.mCodeInput == null))
                {
                    this.mCodeInput = new WpfCustom(this);
                    #region Search Criteria
                    this.mCodeInput.SearchProperties[WpfControl.PropertyNames.ClassName] = null;
                    this.mCodeInput.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mCodeInput.WindowTitles.Add("C# Interactive Window");
                    #endregion
                }
                return this.mCodeInput;
            }
        }
        #endregion
        
        #region Fields
        private WpfCustom mCodeInput;
        #endregion
    }
}
